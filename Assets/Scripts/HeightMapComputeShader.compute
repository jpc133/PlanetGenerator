//Hello world
#pragma kernel CSMain
#include "ShaderIncludes/FractalNoise.cginc"
#include "ShaderIncludes/Math.cginc"

RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float> heights;
uint numVertices;

// Continent settings:
float oceanDepthMultiplier;
float oceanFloorDepth;
float oceanFloorSmoothing;
float mountainBlend;

float4 noiseParams_continents[3];
float4 noiseParams_mask[3];
float4 noiseParams_mountains[3];

[numthreads(512, 1, 1)]
void CSMain(uint id : SV_DispatchThreadID)
{
	if (id >= numVertices) {
		return;
	}

	float3 pos = vertices[id];

	float continentShape = simpleNoise(pos, noiseParams_continents);

	continentShape = smoothMax(continentShape, -oceanFloorDepth, oceanFloorSmoothing);


	if (continentShape < 0) {
		continentShape *= 1 + oceanDepthMultiplier;
	}

	float ridgeNoise = smoothedRidgidNoise(pos, noiseParams_mountains);


	float mask = Blend(0, mountainBlend, simpleNoise(pos, noiseParams_mask));
	// Calculate final height
	float finalHeight = 1 + continentShape * 0.01 + ridgeNoise * 0.01 * mask;
	//finalHeight = 1 + Blend(0, params.x, simpleNoise(pos, noiseParams_mask)) * 0.05;

	vertices[id] *= finalHeight;

	// Set terrain data
	heights[id] = finalHeight;
}
